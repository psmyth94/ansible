---
- name: Bootstrap Development Environment
  hosts: localhost
  gather_facts: true
  become: true
  become_user: "{{ dotfiles_user }}"

  vars_prompt:
    - name: ansible_neovim_force_build
      prompt: "Do you want to force building Neovim from source even if installed already? ([y]es/[n]o)"
      private: false
      default: n
    - name: sshkey_type
      prompt: "What type of SSH key do you want to copy? (id_[r]sa/id_[e]d25519)"
      private: false
      default: e
    - name: install_zsh
      prompt: "Do you want to install Oh-My-Zsh? ([y]es/[n]o/[f]orce)"
      private: false
      default: y
    - name: install_tmux
      prompt: "Do you want to install Tmux w/ Oh-My-Tmux? ([y]es/[n]o/[f]orce)"
      private: false
      default: y
    - name: install_docker
      prompt: "Do you want to install Docker? ([y]es/[n]o/[f]orce)"
      private: false
      default: n
    - name: install_r
      prompt: "Do you want to install R? ([y]es/[n]o)"
      private: false
      default: n
    - name: install_go
      prompt: "Do you want to install Go? ([y]es/[n]o)"
      private: false
      default: n
    # - name: install_k3s
    #   prompt: "Do you want to install K3s? ([y]es/[n]o)"
    #   private: false
    #   default: n
    - name: install_conda
      prompt: "Do you want to install Conda? ([y]es/[n]o)"
      private: false
      default: n

  vars:
    dotfiles_repo: "{{ dotfiles_repo | default('') }}"
    dotfiles_dir: "~{{ dotfiles_user }}/.dotfiles"
    dotfiles_version: "{{ dotfiles_version | default('main') }}"
  tasks:
    - name: Setup Dotfiles
      ansible.builtin.git:
        repo: "{{ dotfiles_repo }}"
        dest: "{{ dotfiles_dir }}"
        version: "{{ dotfiles_version }}"
        update: true
        recursive: true
        track_submodules: true
        force: true

    - name: Setup sshkey
      ansible.builtin.include_role:
        name: sshkey
      vars:
        sshkey_user: "{{ dotfiles_user }}"

    - name: Setup Rust
      ansible.builtin.include_role:
        name: rust
      vars:
        rust_user: "{{ dotilfes_user }}"

    - name: Setup WSL Clipboard Support if on WSL
      ansible.builtin.include_role:
        name: wsl_clipboard_support

    - name: Setup Neovim
      ansible.builtin.include_role:
        name: neovim
      vars:
        neovim_user: "{{ dotfiles_user }}"
        neovim_force_build: "{{ ansible_neovim_force_build == 'y' }}"
        neovim_dotfiles_dir: "{{ dotfiles_dir }}"
      tags:
        - install
        - configure
        - github-copilot

    - name: Setup Zsh with Oh-My-Zsh
      ansible.builtin.include_role:
        name: oh-my-zsh
      vars:
        oh_my_zsh_user: "{{ dotfiles_user }}"
        oh_my_zsh_force_build: "{{ install_zsh == 'f' }}" # doesn't do anything for now
      when: install_zsh == 'y' or install_zsh == 'f'

    - name: Setup Node.js
      ansible.builtin.include_role:
        name: nodejs
      vars:
        nodejs_user: "{{ dotfiles_user }}"

    - name: Setup Tmux with Oh-My-Tmux
      ansible.builtin.include_role:
        name: tmux
      vars:
        tmux_user: "{{ dotfiles_user }}"
      when:
        - install_tmux == 'y'

    - name: Setup Go
      ansible.builtin.include_role:
        name: go
      when: install_go == 'y'

    - name: Setup Docker
      ansible.builtin.include_role:
        name: docker
      when: install_docker == 'y'

    # - name: Setup K3s
    #   ansible.builtin.include_role:
    #     name: xanmanning.k3s
    #   when: install_k3s == 'y'

    - name: Setup Conda
      ansible.builtin.include_role:
        name: miniforge3
      when: install_conda == 'y'

    - name: Setup R
      ansible.builtin.package:
        name: r-base
        state: present
      become: true
      become_user: root
      when: install_r == 'y'
