---

- name: Ensure required build dependencies are installed
  ansible.builtin.package:
    name: "{{ neovim_dependencies }}"
    state: present
  become: true

# - name: Ensure required third-party dependencies are installed
#   ansible.builtin.package:
#     name: "{{ neovim_bundle_dependencies }}"
#     state: present
#   become: true

- name: Ensure required plugin dependencies are installed
  ansible.builtin.package:
    name: "{{ neovim_plugin_dependencies }}"
    state: present
  become: true

- name: Check if Neovim source is already downloaded
  ansible.builtin.stat:
    path: "{{ neovim_install_dir }}/.git"
  register: neovim_git_folder

- name: Clone Neovim repository
  become: true
  ansible.builtin.git:
    repo: "{{ neovim_repo }}"
    dest: "{{ neovim_install_dir }}"
    version: "{{ neovim_version }}"
    depth: 1
    force: "{{ neovim_force_build }}"
  register: clone
  when: not neovim_git_folder.stat.exists

- name: Check if Neovim binary already exists at {{ neovim_bin_dir }}/bin/nvim
  ansible.builtin.stat:
    path: "{{ neovim_bin_dir }}/bin/nvim"
  register: neovim_binary

- name: Build Neovim from source
  community.general.make:
    chdir: "{{ neovim_install_dir }}"
    params:
      CMAKE_BUILD_TYPE: "RelWithDebInfo"
      # USE_BUNDLED: "OFF"
      CMAKE_INSTALL_PREFIX: "{{ neovim_bin_dir }}"
  register: build_neovim
  become: true
  become_user: "{{ neovim_user }}"
  changed_when: "'[100%]' in build_neovim.stdout or '[100%]' in build_neovim.stderr"
  when: not neovim_binary.stat.exists

- name: Install Neovim
  community.general.make:
    chdir: "{{ neovim_install_dir }}"
    target: install
  become: true
  become_user: "{{ neovim_user }}"
  register: install_neovim
  changed_when: "'-- Installing:' in install_neovim.stdout or '-- Installing:' in install_neovim.stderr"
  when: build_neovim.changed

- name: Remove Neovim build directory
  become: true
  ansible.builtin.file:
    path: "{{ neovim_install_dir }}"
    state: absent
