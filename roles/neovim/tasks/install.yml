---

- name: Ensure required build dependencies are installed
  ansible.builtin.package:
    name: "{{ neovim_dependencies }}"
    state: present
  become_user: "root"
  become: true

- name: Install curl
  ansible.builtin.package:
    name: curl
    state: present
  become_user: "root"
  become: true
  when: ansible_os_family == "Debian"

- name: Install python3-pip
  ansible.builtin.package:
    name: python3-pip
    state: present
  become_user: "root"
  become: true
  when: ansible_os_family == "Debian"

- name: Install ripgrep for debian
  ansible.builtin.package:
    name: ripgrep
    state: present
  become_user: "root"
  become: true
  when: ansible_os_family == "Debian"

- name: Install ripgrep for amazon with cargo
  ansible.builtin.command:
    cmd: cargo install ripgrep
  become_user: "root"
  become: true
  when: ansible_os_family == "Amazon"
  changed_when: false

- name: Ensure required python libraries are installed
  ansible.builtin.pip:
    name: "{{ neovim_pip_dependencies }}"
    state: present
    extra_args: --break-system-packages
  become_user: "root"
  become: true
  when: ansible_os_family == "Debian"

- name: Ensure required python libraries are installed
  ansible.builtin.pip:
    name: "{{ neovim_pip_dependencies }}"
    state: present
  become_user: "root"
  become: true
  when: ansible_os_family == "Amazon"


- name: Check if Neovim source is already downloaded
  ansible.builtin.stat:
    path: "{{ neovim_install_dir }}/.git"
  register: neovim_git_folder

- name: Clone Neovim repository
  become: true
  ansible.builtin.git:
    repo: "{{ neovim_repo }}"
    dest: "{{ neovim_install_dir }}"
    version: "{{ neovim_version }}"
    depth: 1
    force: true
    update: true
  register: clone
  when: not neovim_git_folder.stat.exists

- name: Check if Neovim binary already exists at {{ neovim_cmake_install_dir }}/bin/nvim
  ansible.builtin.stat:
    path: "{{ neovim_cmake_install_dir }}/bin/nvim"
  register: neovim_binary

- name: Does neovim need to be built?
  ansible.builtin.set_fact:
    neovim_needs_build: "{{ not neovim_binary.stat.exists or neovim_force_build }}"

- name: Build Neovim from source
  community.general.make:
    chdir: "{{ neovim_install_dir }}"
    params:
      CMAKE_BUILD_TYPE: "RelWithDebInfo"
      # USE_BUNDLED: "OFF"
      CMAKE_INSTALL_PREFIX: "{{ neovim_cmake_install_dir }}"
  register: build_neovim
  become: true
  become_user: "{{ neovim_user }}"
  changed_when: "'[100%]' in build_neovim.stdout or '[100%]' in build_neovim.stderr"
  when: neovim_needs_build

- name: Install Neovim
  community.general.make:
    chdir: "{{ neovim_install_dir }}"
    target: install
  become: true
  become_user: "root"
  register: install_neovim
  changed_when: "'-- Installing:' in install_neovim.stdout or '-- Installing:' in install_neovim.stderr"
  when: neovim_needs_build

- name: Remove Neovim install directory
  become: true
  become_user: "root"
  ansible.builtin.file:
    path: "{{ neovim_install_dir }}"
    state: absent
