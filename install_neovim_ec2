#!/bin/bash
set -e
NEOVIM_USER=$(whoami)
NEOVIM_USER_GROUP=$(whoami)
NEOVIM_DOTFILES_DIR=~/.dotfiles
NEOVIM_INSTALL_DIR=~/neovim
NEOVIM_CMAKE_INSTALL_DIR=/usr/local
NEOVIM_REPO="https://github.com/neovim/neovim.git"
NEOVIM_VERSION="master"
NEOVIM_SRC_CONFIG_DIR="$NEOVIM_DOTFILES_DIR/nvim"
NEOVIM_DEST_CONFIG_DIR="$HOME/.config/nvim"
NEOVIM_GITHUB_COPILOT_SRC_DIR="$NEOVIM_DOTFILES_DIR/github-copilot"
NEOVIM_GITHUB_COPILOT_SRC_KEY="$NEOVIM_GITHUB_COPILOT_SRC_DIR/apps.json"
NEOVIM_GITHUB_COPILOT_DEST_DIR="$HOME/.config/github-copilot"
NEOVIM_GITHUB_COPILOT_DEST_VAULT="$NEOVIM_GITHUB_COPILOT_DEST_DIR/apps.vault"
NEOVIM_GITHUB_COPILOT_DEST_KEY="$NEOVIM_GITHUB_COPILOT_DEST_DIR/apps.json"
NEOVIM_FORCE_BUILD=false
BASHRC="$HOME/.bashrc"
CARGO_PATH_LINE='export PATH="$HOME/.cargo/bin:$PATH"'
LUAROCKS_VERSION="3.11.1"

echo "Installing Neovim on Amazon Linux 2023..."

echo "Installing dependencies..."
for pkg in rust cargo ninja-build gettext cmake gcc-c++ unzip git luajit luajit-devel; do
  if ! rpm -q $pkg &>/dev/null; then
    echo "Installing $pkg..."
    sudo dnf install -y $pkg
  else
    echo "$pkg is already installed."
  fi
done

if rpm -q curl &>/dev/null || rpm -q curl-minimal &>/dev/null; then
  echo "curl or curl-minimal is already installed."
else
  echo "Installing curl..."
  sudo dnf install -y curl
fi

echo "Installing Node.js LTS using NVM..."
if [ ! -d "$HOME/.nvm" ]; then
  echo "Installing NVM..."
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  if ! grep -q "NVM_DIR" "$BASHRC"; then
    echo 'export NVM_DIR="$HOME/.nvm"' >>"$BASHRC"
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >>"$BASHRC"
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >>"$BASHRC"
  fi

  nvm install --lts
  nvm use --lts

  echo "Node.js $(node -v) installed successfully"
else
  echo "NVM is already installed"
  # Load NVM
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Ensure LTS is installed
  nvm install --lts
  nvm use --lts
  echo "Using Node.js $(node -v)"
fi

if ! command -v luarocks &>/dev/null; then
  echo "Installing LuaRocks from source..."
  cd /tmp
  wget https://luarocks.org/releases/luarocks-${LUAROCKS_VERSION}.tar.gz
  tar zxpf luarocks-${LUAROCKS_VERSION}.tar.gz
  cd luarocks-${LUAROCKS_VERSION}
  ./configure --with-lua-include=/usr/include/luajit-2.1
  make
  sudo make install
  cd ..
  rm -rf luarocks-${LUAROCKS_VERSION}*
else
  echo "LuaRocks is already installed."
fi

echo "Installing ripgrep with cargo"
if ! command -v rg &>/dev/null; then
  echo "Installing ripgrep..."
  cargo install ripgrep
else
  echo "ripgrep is already installed."
fi

if [ ! -f "$BASHRC" ]; then
  echo "Creating .bashrc file..."
  touch "$BASHRC"
fi

if grep -Fxq "$CARGO_PATH_LINE" "$BASHRC"; then
  echo "CARGO_PATH_LINE already exists in $BASHRC, skipping..."
else
  echo "Adding CARGO_PATH_LINE to .bashrc..."
  echo "$CARGO_PATH_LINE" >>"$BASHRC"
fi

echo "Installing Python dependencies..."
sudo pip3 install pynvim ruff pyright debugpy pytest pytest-xdist jupytext

if [ -d "$NEOVIM_INSTALL_DIR/.git" ]; then
  echo "Neovim repository already exists, updating..."
  cd "$NEOVIM_INSTALL_DIR"
  git fetch --depth 1
  git reset --hard origin/$NEOVIM_VERSION
else
  echo "Cloning Neovim repository..."
  git clone --depth 1 -b "$NEOVIM_VERSION" "$NEOVIM_REPO" "$NEOVIM_INSTALL_DIR"
fi

if [ ! -f "$NEOVIM_CMAKE_INSTALL_DIR/bin/nvim" ] || [ "$NEOVIM_FORCE_BUILD" = true ]; then
  echo "Building Neovim from source..."
  cd "$NEOVIM_INSTALL_DIR"
  make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX="$NEOVIM_CMAKE_INSTALL_DIR"

  echo "Installing Neovim..."
  sudo make install

  echo "Cleaning up build directory..."
  cd ~
  sudo rm -rf "$NEOVIM_INSTALL_DIR"
else
  echo "Neovim is already installed, skipping build."
fi

echo "Setting up GitHub Copilot..."
mkdir -p "$NEOVIM_GITHUB_COPILOT_DEST_DIR"
chmod 700 "$NEOVIM_GITHUB_COPILOT_DEST_DIR"

if [ -f "$NEOVIM_GITHUB_COPILOT_SRC_KEY" ] && [ ! -f "$NEOVIM_GITHUB_COPILOT_DEST_KEY" ]; then
  cp "$NEOVIM_GITHUB_COPILOT_SRC_KEY" "$NEOVIM_GITHUB_COPILOT_DEST_VAULT"
  ansible-vault decrypt "$NEOVIM_GITHUB_COPILOT_DEST_VAULT" --output "$NEOVIM_GITHUB_COPILOT_DEST_KEY"
  chmod 600 "$NEOVIM_GITHUB_COPILOT_DEST_KEY"
fi

echo "Setting up Neovim configuration..."
if [ -d "$NEOVIM_DEST_CONFIG_DIR" ]; then
  echo "Removing existing config directory..."
  rm -rf "$NEOVIM_DEST_CONFIG_DIR"
fi

echo "Creating symbolic link to Neovim configuration..."
ln -s "$NEOVIM_SRC_CONFIG_DIR" "$NEOVIM_DEST_CONFIG_DIR"

if [ -n "$XDG_RUNTIME_DIR" ]; then
  echo "Applying permission fix for XDG_RUNTIME_DIR..."
  sudo mkdir -p "$XDG_RUNTIME_DIR"
  sudo chown "$NEOVIM_USER:$NEOVIM_USER_GROUP" "$XDG_RUNTIME_DIR"
  sudo chmod 700 "$XDG_RUNTIME_DIR"
fi
